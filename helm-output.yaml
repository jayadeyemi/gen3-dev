---
# Source: acks/charts/acks/charts/ec2/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: ec2
    app.kubernetes.io/instance: aws
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.4.3"
    k8s-app: ec2
    helm.sh/chart: ec2-1.4.3
  name: ack-ec2-controller
  namespace: ack-controllers
  annotations:
---
# Source: acks/charts/acks/charts/ec2/templates/caches-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ack-namespaces-cache-ec2-controller
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
---
# Source: acks/charts/acks/charts/ec2/templates/caches-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ack-namespaces-cache-ec2-controller
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: ack-namespaces-cache-ec2-controller
subjects:
- kind: ServiceAccount
  name: ack-ec2-controller
  namespace: ack-controllers
---
# Source: acks/charts/acks/charts/ec2/templates/caches-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ack-configmaps-cache-ec2-controller
  namespace: ack-controllers
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: acks/charts/acks/charts/ec2/templates/cluster-role-controller.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ack-ec2-controller
  namespace: ack-network
  labels:
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ec2.services.k8s.aws
  resources:
  - capacityreservations
  - dhcpoptions
  - elasticipaddresses
  - flowlogs
  - instances
  - internetgateways
  - launchtemplates
  - natgateways
  - networkacls
  - routetables
  - securitygroups
  - subnets
  - transitgateways
  - transitgatewayvpcattachments
  - vpcendpoints
  - vpcendpointserviceconfigurations
  - vpcpeeringconnections
  - vpcs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ec2.services.k8s.aws
  resources:
  - capacityreservations/status
  - dhcpoptions/status
  - elasticipaddresses/status
  - flowlogs/status
  - instances/status
  - internetgateways/status
  - launchtemplates/status
  - natgateways/status
  - networkacls/status
  - routetables/status
  - securitygroups/status
  - subnets/status
  - transitgateways/status
  - transitgatewayvpcattachments/status
  - vpcendpoints/status
  - vpcendpointserviceconfigurations/status
  - vpcpeeringconnections/status
  - vpcs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - services.k8s.aws
  resources:
  - adoptedresources
  - fieldexports
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - services.k8s.aws
  resources:
  - adoptedresources/status
  - fieldexports/status
  verbs:
  - get
  - patch
  - update
---
# Source: acks/charts/acks/charts/ec2/templates/role-reader.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: ack-ec2-reader
  namespace: ack-controllers
rules:
- apiGroups:
  - ec2.services.k8s.aws
  resources:
  - capacityreservations
  - dhcpoptions
  - elasticipaddresses
  - flowlogs
  - instances
  - internetgateways
  - launchtemplates
  - natgateways
  - networkacls
  - routetables
  - securitygroups
  - subnets
  - transitgateways
  - transitgatewayvpcattachments
  - vpcs
  - vpcendpoints
  - vpcendpointserviceconfigurations
  - vpcpeeringconnections
  verbs:
  - get
  - list
  - watch
---
# Source: acks/charts/acks/charts/ec2/templates/role-writer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: ack-ec2-writer
  namespace: ack-controllers
rules:
- apiGroups:
  - ec2.services.k8s.aws
  resources:
  - capacityreservations
  - dhcpoptions
  - elasticipaddresses
  - flowlogs
  - instances
  - internetgateways
  - launchtemplates
  - natgateways
  - networkacls
  - routetables
  - securitygroups
  - subnets
  - transitgateways
  - transitgatewayvpcattachments
  - vpcs
  - vpcendpoints
  - vpcendpointserviceconfigurations
  - vpcpeeringconnections
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ec2.services.k8s.aws
  resources:
  - capacityreservations
  - dhcpoptions
  - elasticipaddresses
  - flowlogs
  - instances
  - internetgateways
  - launchtemplates
  - natgateways
  - networkacls
  - routetables
  - securitygroups
  - subnets
  - transitgateways
  - transitgatewayvpcattachments
  - vpcs
  - vpcendpoints
  - vpcendpointserviceconfigurations
  - vpcpeeringconnections
  verbs:
  - get
  - patch
  - update
---
# Source: acks/charts/acks/charts/ec2/templates/caches-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ack-configmaps-cache-ec2-controller
  namespace: ack-controllers
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: ack-configmaps-cache-ec2-controller
subjects:
- kind: ServiceAccount
  name: ack-ec2-controller
  namespace: ack-controllers
---
# Source: acks/charts/acks/charts/ec2/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aws-ec2
  namespace: ack-network
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: ack-ec2-controller
subjects:
- kind: ServiceAccount
  name: ack-ec2-controller
  namespace: ack-controllers
---
# Source: acks/charts/acks/charts/ec2/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aws-ec2
  namespace: ack-controllers
  labels:
    app.kubernetes.io/name: ec2
    app.kubernetes.io/instance: aws
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.4.3"
    k8s-app: ec2
    helm.sh/chart: ec2-1.4.3
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ec2
      app.kubernetes.io/instance: aws
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ec2
        app.kubernetes.io/instance: aws
        app.kubernetes.io/managed-by: Helm
        k8s-app: ec2
    spec:
      serviceAccountName: ack-ec2-controller
      containers:
      - command:
        - ./bin/controller
        args:
        - --aws-region
        - "$(AWS_REGION)"
        - --aws-endpoint-url
        - "$(AWS_ENDPOINT_URL)"
        - --log-level
        - "$(ACK_LOG_LEVEL)"
        - --resource-tags
        - "$(ACK_RESOURCE_TAGS)"
        - --watch-namespace
        - "$(ACK_WATCH_NAMESPACE)"
        - --watch-selectors
        - "$(ACK_WATCH_SELECTORS)"
        - --deletion-policy
        - "$(DELETION_POLICY)"
        - --reconcile-default-resync-seconds
        - "$(RECONCILE_DEFAULT_RESYNC_SECONDS)"
        - --reconcile-default-max-concurrent-syncs
        - "$(RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS)"
        - --feature-gates
        - "$(FEATURE_GATES)"
        image: controller:latest
        imagePullPolicy: IfNotPresent
        name: controller
        ports:
          - name: http
            containerPort: 8080
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 200Mi
        env:
        - name: ACK_SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_REGION
          value: 
        - name: AWS_ENDPOINT_URL
          value: ""
        - name: ACK_WATCH_NAMESPACE
          value: ack-network
        - name: ACK_WATCH_SELECTORS
          value: 
        - name: DELETION_POLICY
          value: delete
        - name: LEADER_ELECTION_NAMESPACE
          value: "leader-election-namespace"
        - name: ACK_LOG_LEVEL
          value: "info"
        - name: ACK_RESOURCE_TAGS
          value: ""
        - name: RECONCILE_DEFAULT_RESYNC_SECONDS
          value: "36000"
        - name: RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS
          value: "1"
        - name: FEATURE_GATES
          value: ReadOnlyResources=false,ResourceAdoption=false,ServiceLevelCARM=false,TeamLevelCARM=false
        volumeMounts:
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 10
      nodeSelector: 
        kubernetes.io/os: linux
      hostIPC: false
      hostPID: false
      hostNetwork: false
      dnsPolicy: ClusterFirst
      volumes:

