AWSTemplateFormatVersion: '2010-09-09'
Description: 'Phase 1: CloudFormation template to set up an AWS Cloud Web Application in a Public Subnet'

Parameters:
  Subnet1AZ:
    Type: String
    Description: Availability Zone for the first subnet
    Default: us-east-1a
    AllowedValues:
      - ---------- 
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-1d
      - ---------
      - us-east-2a
      - us-east-2b
      - us-east-2c
      - --------
      - us-west-1a
      - us-west-1b
      - -------
      - us-west-2a
      - us-west-2b
      - us-west-2c
      - us-west-2d
      - ------

  Subnet2AZ:
    Type: String
    Description: Availability Zone for the second public subnet
    Default: us-east-1b
    AllowedValues:
      - ---------- 
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-1d
      - ---------
      - us-east-2a
      - us-east-2b
      - us-east-2c
      - --------
      - us-west-1a
      - us-west-1b
      - -------
      - us-west-2a
      - us-west-2b
      - us-west-2c
      - us-west-2d
      - ------

  EC2InstanceProfile:
    Type: String
    Description: The name of the instance profile to be attached to the EC2 instances
    Default: LabInstanceProfile

  EC2INSTANCEAMIID:
    Type: String
    Description: The AMI ID for the EC2 instances
    Default: ami-0e2c8caa4b6378d8c
  
  INSTANCETYPE: 
    Type: String
    Description: The instance type for the EC2 instances (t2.micro, t2.small, t2.medium, etc.)
    Default: t2.micro

  VPCName:
    Type: String
    Description: VPC name
    Default: Inventory-VPC

  PubSubnet1Name:
    Type: String
    Description: Public subnet 1 name
    Default: Inv-Pub-Sub1

  PubSubnet2Name:
    Type: String
    Description: Public subnet 2 name
    Default: Inv-Pub-Sub2

  VPCCIDR:
    Type: String
    Description: VPC CIDR block
    Default: 192.168.0.0/16

  PubSubnet1CIDR:
    Type: String
    Description: Public subnet 1 CIDR block
    Default: 192.168.1.0/24

  PubSubnet2CIDR:
    Type: String
    Description: Public subnet 2 CIDR block
    Default: 192.168.2.0/24

  EC2V1SGName:
    Type: String
    Description: EC2 security group 1 name
    Default: EC2-V1-SG

  EC2V1NAME:
    Type: String
    Description: EC2 instance 1 name
    Default: Inventory-V1

  PUBLICKEYPAIRNAME:
    Type: String
    Description: The name of EC2 Key Pair to enable SSH access to public instances
    Default: PUBLIC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Availability Zones"
        Parameters:
          - Subnet1AZ
          - Subnet2AZ
      - Label:
          default: "Instance Details"
        Parameters:
          - EC2InstanceProfile
          - EC2INSTANCEAMIID
          - INSTANCETYPE
      - Label:
          default: "VPC Names"
        Parameters:
          - VPCName
          - PubSubnet1Name
          - PubSubnet2Name
      - Label:
          default: "Security Group Names"
        Parameters:
          - EC2V1SGName
      - Label:
          default: "Instance Related Names"
        Parameters:
          - EC2V1NAME
          - PUBLICKEYPAIRNAME
      - Label:
          default: "CIDR Blocks"
        Parameters:
          - VPCCIDR
          - PubSubnet1CIDR
          - PubSubnet2CIDR
    ParameterLabels:
      Subnet1AZ:
        default: "Subnet 1 Availability Zone"
      Subnet2AZ:
        default: "Subnet 2 Availability Zone"
      EC2InstanceProfile:
        default: "EC2 Instance Profile"
      EC2INSTANCEAMIID:
        default: "EC2 AMI ID for Server V1"
      INSTANCETYPE:
        default: "Phase1: Instance Type for Server V1"
      VPCName:
        default: "VPC Name"
      PubSubnet1Name:
        default: "Public Subnet 1 Name"
      PubSubnet2Name:
        default: "Public Subnet 2 Name"
      VPCCIDR:
        default: "VPC CIDR Block"
      PubSubnet1CIDR:
        default: "Public Subnet 1 CIDR"
      PubSubnet2CIDR:
        default: "Public Subnet 2 CIDR"
      EC2V1SGName:
        default: "EC2 Security Group Name for Server V1"
      EC2V1NAME:
        default: "Instance Name for Server V1"
      PUBLICKEYPAIRNAME:
        default: "Key Pair Name for Public Instances"

Resources:
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
 
  # -----------------------------------------------------------
  # VPC Attachments
  # -----------------------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref VPCName, 'IGW' ] ]

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway
  
  # -----------------------------------------------------------
  # VPC Subnets (Public only)
  # -----------------------------------------------------------
  PubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PubSubnet1CIDR
      AvailabilityZone: !Ref Subnet1AZ
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PubSubnet1Name

  PubSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PubSubnet2CIDR
      AvailabilityZone: !Ref Subnet2AZ
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PubSubnet2Name

  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref VPCName
              - Pub-Route-Table

  # -----------------------------------------------------------
  # Route Table Associations (Public only)
  # -----------------------------------------------------------
  PubRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnet1
      RouteTableId: !Ref PubRouteTable

  PubRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnet2
      RouteTableId: !Ref PubRouteTable

  # -----------------------------------------------------------
  # Public Route
  # -----------------------------------------------------------
  PubRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  # -----------------------------------------------------------
  # Security Groups
  # -----------------------------------------------------------
  EC2V1SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EC2V1 Security Group"
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Ref EC2V1SGName

  EC2V1SecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2V1SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  # -----------------------------------------------------------
  # Instances
  # -----------------------------------------------------------
  EC2V1Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref INSTANCETYPE
      ImageId: !Ref EC2INSTANCEAMIID
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref PUBLICKEYPAIRNAME
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !GetAtt EC2V1SecurityGroup.GroupId
          SubnetId: !Ref PubSubnet2
      Tags:
        - Key: Name
          Value: !Ref EC2V1NAME
        - Key: Phase
          Value: '1'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update system and install essential packages
          apt-get update -y && apt-get upgrade -y
          
          # Install Docker container runtime
          apt-get install -y docker.io
          systemctl enable docker
          systemctl start docker
          
          # Install Git for cloning the Helm chart repository
          apt-get install -y git
          
          # Disable swap (required for Kubernetes)
          swapoff -a
          sed -i '/ swap / s/^/#/' /etc/fstab
          
          # Install Kubernetes components
          apt-get install -y apt-transport-https curl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
          apt-get update -y
          apt-get install -y kubelet kubeadm kubectl
          apt-mark hold kubelet kubeadm kubectl
          
          # Initialize Kubernetes cluster with a pod network CIDR suitable for Flannel
          kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=Swap
          
          # Set up kubectl for the ubuntu user
          mkdir -p /home/ubuntu/.kube
          cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
          chown ubuntu:ubuntu /home/ubuntu/.kube/config
          
          # Deploy pod network add-on (Flannel)
          sudo -u ubuntu kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
          
          # Install Helm (v3)
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Clone custom Helm chart repository from GitHub
          git clone https://github.com/jayadeyemi/ /home/ubuntu/jayadeyemi-helm-chart
          
          # Deploy custom Helm chart for AWS S3 and CloudFront resources
          cd /home/ubuntu/jayadeyemi-helm-chart/Extraction/resources/access
          helm dependency update
          helm install helm-access .
          
          # Ensure rc.local is executable for Docker restart on reboot if required
          echo '#!/bin/bash -xe
          /usr/bin/docker start' > /etc/rc.local
          chmod +x /etc/rc.local

Outputs:
  EC2V1InstancePublicIP:
    Description: The public IP of the EC2 instance
    Value: !GetAtt EC2V1Instance.PublicIp
