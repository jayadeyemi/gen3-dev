module:
  cdis_vpc:
    module:
      squid-auto:
        resource:         
          aws_subnet:
            squid_pub0:
              count: length(var.squid_availability_zones)
              vpc_id: .env_vpc_id
              cidr_block: '.network_expansion ? cidrsubnet(var.squid_proxy_subnet,
                2, count.index) : cidrsubnet(var.squid_proxy_subnet, 3, count.index)'
              availability_zone: .squid_availability_zones[count.index]
              tags: 'tomap("Name": ".env_squid_name_pubcount.index", "Organization":
                ".organization_name", "Environment": ".env_squid_name")'
          aws_route_table_association:
            squid_auto0:
              count: length(var.squid_availability_zones)
              subnet_id: aws_subnet.squid_pub0.*.id[count.index]
              route_table_id: .main_public_route
          aws_security_group:
          - squidauto_in:
              name: .env_squid_name-squidauto_in
              description: security group that only enables ssh from VPC nodes and
                CSOC
              vpc_id: .env_vpc_id
              ingress:
                from_port:
                - 22
                - 3128
                - 80
                - 443
                to_port:
                - 22
                - 3128
                - 80
                - 443
                protocol:
                - TCP
                - TCP
                - TCP
                - TCP
                cidr_blocks:
                - local.cidrs
                - local.cidrs
                - local.cidrs2
                - local.cidrs2
              tags:
                Environment: .env_squid_name
                Organization: .organization_name
              lifecycle:
                ignore_changes: description
          - squidauto_out:
              name: .env_squid_name-squidauto_out
              description: security group that allow outbound traffics
              vpc_id: .env_vpc_id
              egress:
                from_port: 0
                to_port: 0
                protocol: '-1'
                cidr_blocks: 0.0.0.0/0
              tags:
                Environment: .env_squid_name
                Organization: .organization_name
    resource:
      aws_vpc:
        main:
          cidr_block: .vpc_cidr_block
          enable_dns_hostnames: true
          tags:
            Name: .vpc_name
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: tags
      aws_flow_log:
        main:
          count: '.vpc_flow_logs ? 1 : 0'
          iam_role_arn: aws_iam_role.flow_logs[count.index].arn
          log_destination: aws_cloudwatch_log_group.main_log_group.arn
          traffic_type: .vpc_flow_traffic
          vpc_id: aws_vpc.main.id
      aws_vpc_ipv4_cidr_block_association:
        secondary_cidr:
          count: '.secondary_cidr_block != "" ? 1 : 0'
          vpc_id: aws_vpc.main.id
          cidr_block: .secondary_cidr_block
      aws_internet_gateway:
        gw:
          vpc_id: aws_vpc.main.id
          tags:
            Name: .vpc_name-igw
            Environment: .vpc_name
            Organization: .organization_name
      aws_nat_gateway:
        nat_gw:
          allocation_id: aws_eip.nat_gw.id
          subnet_id: aws_subnet.public.id
          tags:
            Name: .vpc_name-ngw
            Environment: .vpc_name
            Organization: .organization_name
      aws_route_table:
        public:
          vpc_id: aws_vpc.main.id
          route:
            cidr_block:
            - 0.0.0.0/0
            - .peering_cidr
            gateway_id: aws_internet_gateway.gw.id
            vpc_peering_connection_id: aws_vpc_peering_connection.vpcpeering.id
          tags:
            Name: main
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      aws_eip:
        nat_gw:
          vpc: true
          tags:
            Name: .vpc_name-ngw-eip
            Environment: .vpc_name
            Organization: .organization_name
      aws_default_route_table:
        default:
          default_route_table_id: aws_vpc.main.default_route_table_id
          route:
            cidr_block: .peering_cidr
            vpc_peering_connection_id: aws_vpc_peering_connection.vpcpeering.id
          tags:
            Name: default table
            Environment: .vpc_name
            Organization: .organization_name
      aws_main_route_table_association:
        default:
          vpc_id: aws_vpc.main.id
          route_table_id: aws_default_route_table.default.id
      aws_route_table_association:
        public:
          subnet_id: aws_subnet.public.id
          route_table_id: aws_route_table.public.id
      aws_subnet:
        public:
          vpc_id: aws_vpc.main.id
          cidr_block: '.network_expansion ? cidrsubnet(var.vpc_cidr_block, 5,
            2) : cidrsubnet(var.vpc_cidr_block, 4, 0)'
          map_public_ip_on_launch: true
          availability_zone: data.aws_availability_zones.available.names[1]
          tags: 'tomap("Name": "public", "Organization": ".organization_name",
            "Environment": ".vpc_name")'
          lifecycle:
            ignore_changes: tags availability_zone
      aws_route53_zone:
        main:
          name: internal.io
          comment: internal dns server for .vpc_name
          vpc:
            vpc_id: aws_vpc.main.id
          tags:
            Environment: .vpc_name
            Organization: .organization_name
      aws_vpc_peering_connection:
        vpcpeering:
          peer_owner_id: '.csoc_managed ? var.csoc_account_id : data.aws_caller_identity.current.account_id'
          peer_vpc_id: .peering_vpc_id
          vpc_id: aws_vpc.main.id
          auto_accept: false
          tags:
            Name: VPC Peering between .vpc_name and adminVM vpc
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      aws_route:
        default_csoc:
          count: '.csoc_managed ? 0 : 1'
          route_table_id: data.aws_route_tables.control_routing_table[count.index].id
          destination_cidr_block: .vpc_cidr_block
          vpc_peering_connection_id: aws_vpc_peering_connection.vpcpeering.id
      aws_security_group:
      - local:
          name: local
          description: security group that only allow internal tcp traffics
          vpc_id: aws_vpc.main.id
          ingress:
            from_port: 0
            to_port: 0
            protocol: '-1'
            cidr_blocks: local.cidrs
          egress:
            from_port: 0
            to_port: 0
            protocol: '-1'
            cidr_blocks: local.cidrs_no_peering
          tags:
            Environment: .vpc_name
            Organization: .organization_name
            Name: .vpc_name-local-sec-group
      - out:
          name: out
          description: security group that allow outbound traffics
          vpc_id: aws_vpc.main.id
          egress:
            from_port: 0
            to_port: 0
            protocol: '-1'
            cidr_blocks: 0.0.0.0/0
          tags:
            Environment: .vpc_name
            Organization: .organization_name
            Name: .vpc_name-outbound-traffic
      - proxy:
          count: '.deploy_single_proxy ? 1 : 0 '
          name: squid-proxy
          description: allow inbound tcp at 3128
          vpc_id: aws_vpc.main.id
          ingress:
            from_port: 0
            to_port: 3128
            protocol: TCP
            cidr_blocks: local.cidrs
          tags:
            Environment: .vpc_name
            Organization: Basic Service
  commons_vpc_es:
    resource:
      aws_security_group:
        private_es:
          name: private_es
          description: security group that allow es port out
          vpc_id: local.vpc_id
          ingress:
            from_port: 0
            to_port: 0
            protocol: '-1'
            cidr_blocks: local.all_cidr_blocks
          egress:
            from_port: 0
            to_port: 0
            protocol: '-1'
            cidr_blocks: local.all_cidr_blocks
          tags:
            Environment: .vpc_name
            Organization: .organization_name
  csoc_peering_connection:
    resource:
      aws_vpc_peering_connection_accepter:
        vpcpeering:
          vpc_peering_connection_id: .pcx_id
          auto_accept: true
          tags:
            Name: VPC Peering between .vpc_name and adminVM vpc
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      aws_route:
        r:
          route_table_id: data.aws_route_table.selected.id
          destination_cidr_block: .vpc_cidr_block
          vpc_peering_connection_id: aws_vpc_peering_connection_accepter.vpcpeering.id
          depends_on: aws_vpc_peering_connection_accepter.vpcpeering
  eks:
    module:
      workflow_pool:
        resource:
          aws_security_group:
          - eks_nodes_sg:
              name: .vpc_name_EKS_nodepool_.nodepool_sg
              description: 'Security group for all nodes in pool .nodepool in
                the EKS cluster [.vpc_name] '
              vpc_id: local.vpc_id
              egress:
                from_port: 0
                to_port: 0
                protocol: '-1'
                cidr_blocks: 0.0.0.0/0
              tags: 'tomap("Name": ".vpc_name-nodes-sg-.nodepool",
                "kubernetes.io/cluster/.vpc_name": "owned", "karpenter.sh/discovery":
                ".vpc_name-.nodepool")'
          - ssh:
              name: ssh_eks_.vpc_name-nodepool-.nodepool
              description: security group that only enables ssh
              vpc_id: local.vpc_id
              ingress:
                from_port: 22
                to_port: 22
                protocol: TCP
                cidr_blocks: 0.0.0.0/0
              tags:
                Environment: .vpc_name
                Organization: .organization_name
                Name: ssh_eks_.vpc_name-nodepool-.nodepool
                karpenter.sh/discovery: .vpc_name-.nodepool
          aws_security_group_rule:
          - https_nodes_to_plane:
              type: ingress
              from_port: 443
              to_port: 443
              protocol: tcp
              security_group_id: .control_plane_sg
              source_security_group_id: aws_security_group.eks_nodes_sg.id
              depends_on: aws_security_group.eks_nodes_sg
          - communication_plane_to_nodes:
              type: ingress
              from_port: 80
              to_port: 65534
              protocol: tcp
              security_group_id: aws_security_group.eks_nodes_sg.id
              source_security_group_id: .control_plane_sg
              depends_on: aws_security_group.eks_nodes_sg
          - nodes_internode_communications:
              type: ingress
              from_port: 0
              to_port: 0
              protocol: '-1'
              description: allow nodes to communicate with each other
              security_group_id: aws_security_group.eks_nodes_sg.id
              self: true
          - nodes_interpool_communications:
              type: ingress
              from_port: 0
              to_port: 0
              protocol: '-1'
              description: allow default nodes to communicate with each other
              security_group_id: aws_security_group.eks_nodes_sg.id
              source_security_group_id: .default_nodepool_sg
    resource:  
      aws_subnet:
      - eks_private:
          count: random_shuffle.az[0].result_count
          vpc_id: local.vpc_id
          cidr_block: '.workers_subnet_size == 22 ? cidrsubnet(data.aws_vpc.the_vpc.cidr_block,
            2, (1 + count.index)) : var.workers_subnet_size == 23 ? cidrsubnet(data.aws_vpc.the_vpc.cidr_block,
            3, (2 + count.index)) : cidrsubnet(data.aws_vpc.the_vpc.cidr_block, 4,
            (7 + count.index))'
          availability_zone: random_shuffle.az[0].result[count.index]
          map_public_ip_on_launch: false
          lifecycle:
            ignore_changes: tags availability_zone cidr_block
          tags: 'tomap("Name": "eks_private_count.index", "Environment": ".vpc_name",
            "Organization": ".organization_name", "kubernetes.io/cluster/.vpc_name":
            "owned", "kubernetes.io/role/internal-elb": "1", "karpenter.sh/discovery":
            ".vpc_name")'
      - eks_secondary_subnet:
          count: '.secondary_cidr_block != "" ? 4 : 0'
          vpc_id: local.vpc_id
          cidr_block: cidrsubnet(var.secondary_cidr_block, 2, count.index)
          availability_zone: random_shuffle.secondary_az[0].result[count.index]
          map_public_ip_on_launch: false
          lifecycle:
            ignore_changes: tags availability_zone cidr_block
          tags: 'tomap("Name": "eks_secondary_cidr_subnet_count.index", "Environment":
            ".vpc_name", "Organization": ".organization_name", "kubernetes.io/cluster/.vpc_name":
            "owned", "kubernetes.io/role/internal-elb": "1", "karpenter.sh/discovery":
            ".vpc_name")'
      - eks_public:
          count: random_shuffle.az[0].result_count
          vpc_id: local.vpc_id
          cidr_block: '.workers_subnet_size == 22 ? cidrsubnet(data.aws_vpc.the_vpc.cidr_block,
            5, (4 + count.index)) : cidrsubnet(data.aws_vpc.the_vpc.cidr_block, 4,
            (10 + count.index))'
          map_public_ip_on_launch: true
          availability_zone: random_shuffle.az[0].result[count.index]
          lifecycle:
            ignore_changes: tags availability_zone cidr_block
          tags: 'tomap("Name": "eks_public_count.index", "Environment": ".vpc_name",
            "Organization": ".organization_name", "kubernetes.io/cluster/.vpc_name":
            "shared", "kubernetes.io/role/elb": "1", "KubernetesCluster": ".vpc_name")'
      aws_route_table:
        eks_private:
          vpc_id: local.vpc_id
          lifecycle: 
          tags:
            Name: eks_private
            Environment: .vpc_name
            Organization: .organization_name
      aws_route:
      - for_peering:
          route_table_id: aws_route_table.eks_private.id
          destination_cidr_block: .peering_cidr
          vpc_peering_connection_id: data.aws_vpc_peering_connection.pc.id
      - skip_proxy:
          count: length(var.cidrs_to_route_to_gw)
          route_table_id: aws_route_table.eks_private.id
          destination_cidr_block: element(var.cidrs_to_route_to_gw, count.index)
          nat_gateway_id: data.aws_nat_gateway.the_gateway.id
          depends_on: aws_route_table.eks_private
      - public_access:
          count: '.ha_squid ? var.dual_proxy ? 1 : 0 : 1'
          destination_cidr_block: 0.0.0.0/0
          route_table_id: aws_route_table.eks_private.id
          network_interface_id: data.aws_instances.squid_proxy[count.index].ids[0]
      aws_route_table_association:
      - private_kube:
          count: random_shuffle.az[0].result_count
          subnet_id: aws_subnet.eks_private.*.id[count.index]
          route_table_id: aws_route_table.eks_private.id
          depends_on: aws_subnet.eks_private
      - secondary_subnet_kube:
          count: '.secondary_cidr_block != "" ? random_shuffle.secondary_az[0].result_count
            : 0'
          subnet_id: aws_subnet.eks_secondary_subnet.*.id[count.index]
          route_table_id: aws_route_table.eks_private.id
          depends_on: aws_subnet.eks_secondary_subnet
      - public_kube:
          count: random_shuffle.az[0].result_count
          subnet_id: aws_subnet.eks_public.*.id[count.index]
          route_table_id: data.aws_route_table.public_kube.id
          lifecycle: 
      aws_security_group:
      - eks_control_plane_sg:
          name: .vpc_name-control-plane
          description: Cluster communication with worker nodes [.vpc_name]
          vpc_id: local.vpc_id
          egress:
            from_port: 0
            to_port: 0
            protocol: '-1'
            cidr_blocks: 0.0.0.0/0
          tags:
            Name: .vpc_name-control-plane-sg
            Environment: .vpc_name
            Organization: .organization_name
      - eks_nodes_sg:
          name: .vpc_name_EKS_workers_sg
          description: 'Security group for all nodes in the EKS cluster [.vpc_name] '
          vpc_id: local.vpc_id
          egress:
            from_port: 0
            to_port: 0
            protocol: '-1'
            cidr_blocks: 0.0.0.0/0
          tags: 'tomap("Name": ".vpc_name-nodes-sg", "kubernetes.io/cluster/.vpc_name":
            "owned", "karpenter.sh/discovery": ".vpc_name")'
      - ssh:
          name: ssh_eks_.vpc_name
          description: security group that only enables ssh
          vpc_id: local.vpc_id
          ingress:
            from_port: 22
            to_port: 22
            protocol: TCP
            cidr_blocks: 0.0.0.0/0
          tags: 'tomap("Environment": ".vpc_name", "Organization": ".organization_name",
            "Name": "ssh_eks_.vpc_name", "karpenter.sh/discovery": ".vpc_name")'
      aws_security_group_rule:
      - https_nodes_to_plane:
          type: ingress
          from_port: 443
          to_port: 443
          protocol: tcp
          security_group_id: aws_security_group.eks_control_plane_sg.id
          source_security_group_id: aws_security_group.eks_nodes_sg.id
          depends_on: aws_security_group.eks_nodes_sg aws_security_group.eks_control_plane_sg
          description: from the workers to the control plane
      - https_csoc_to_plane:
          count: '.csoc_managed ? 1 : 0'
          type: ingress
          from_port: 443
          to_port: 443
          protocol: tcp
          security_group_id: aws_security_group.eks_control_plane_sg.id
          cidr_blocks: .peering_cidr
          depends_on: aws_security_group.eks_nodes_sg aws_security_group.eks_control_plane_sg
          description: from the CSOC to the control plane
      - communication_plane_to_nodes:
          type: ingress
          from_port: 80
          to_port: 65534
          protocol: tcp
          security_group_id: aws_security_group.eks_nodes_sg.id
          source_security_group_id: aws_security_group.eks_control_plane_sg.id
          depends_on: aws_security_group.eks_nodes_sg aws_security_group.eks_control_plane_sg
          description: from the control plane to the nodes
      - nodes_internode_communications:
          type: ingress
          from_port: 0
          to_port: 0
          protocol: '-1'
          description: allow nodes to communicate with each other
          security_group_id: aws_security_group.eks_nodes_sg.id
          self: true
      - nodes_interpool_communications:
          count: '.deploy_jupyter ? 1 : 0'
          type: ingress
          from_port: 0
          to_port: 0
          protocol: '-1'
          description: allow jupyter nodes to talk to the default
          security_group_id: aws_security_group.eks_nodes_sg.id
          source_security_group_id: module.jupyter_pool[0].nodepool_sg
      - workflow_nodes_interpool_communications:
          count: '.deploy_workflow ? 1 : 0'
          type: ingress
          from_port: 0
          to_port: 0
          protocol: '-1'
          description: allow workflow nodes to talk to the default
          security_group_id: aws_security_group.eks_nodes_sg.id
          source_security_group_id: module.workflow_pool[0].nodepool_sg
      aws_vpc_endpoint:
      - ec2:
          count: '.enable_vpc_endpoints ? 1 : 0'
          vpc_id: data.aws_vpc.the_vpc.id
          service_name: data.aws_vpc_endpoint_service.ec2.service_name
          vpc_endpoint_type: Interface
          security_group_ids: data.aws_security_group.local_traffic.id
          private_dns_enabled: true
          subnet_ids: flatten([aws_subnet.eks_private[*].id])
          tags:
            Name: to ec2
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      - sts:
          count: '.enable_vpc_endpoints ? 1 : 0'
          vpc_id: data.aws_vpc.the_vpc.id
          service_name: data.aws_vpc_endpoint_service.sts.service_name
          vpc_endpoint_type: Interface
          security_group_ids: data.aws_security_group.local_traffic.id
          private_dns_enabled: true
          subnet_ids: flatten([aws_subnet.eks_private[*].id])
          tags:
            Name: to sts
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      - autoscaling:
          count: '.enable_vpc_endpoints ? 1 : 0'
          vpc_id: data.aws_vpc.the_vpc.id
          service_name: data.aws_vpc_endpoint_service.autoscaling.service_name
          vpc_endpoint_type: Interface
          security_group_ids: data.aws_security_group.local_traffic.id
          private_dns_enabled: true
          subnet_ids: flatten([aws_subnet.eks_private[*].id])
          tags:
            Name: to autoscaling
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      - ecr-dkr:
          count: '.enable_vpc_endpoints ? 1 : 0'
          vpc_id: data.aws_vpc.the_vpc.id
          service_name: data.aws_vpc_endpoint_service.ecr_dkr.service_name
          vpc_endpoint_type: Interface
          security_group_ids: data.aws_security_group.local_traffic.id
          private_dns_enabled: true
          subnet_ids: flatten([aws_subnet.eks_private[*].id])
          tags:
            Name: to ecr dkr
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      - ecr-api:
          count: '.enable_vpc_endpoints ? 1 : 0'
          vpc_id: data.aws_vpc.the_vpc.id
          service_name: data.aws_vpc_endpoint_service.ecr_api.service_name
          vpc_endpoint_type: Interface
          security_group_ids: data.aws_security_group.local_traffic.id
          private_dns_enabled: true
          subnet_ids: flatten([aws_subnet.eks_private[*].id])
          tags:
            Name: to ecr api
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      - ebs:
          count: '.enable_vpc_endpoints ? 1 : 0'
          vpc_id: data.aws_vpc.the_vpc.id
          service_name: data.aws_vpc_endpoint_service.ebs.service_name
          vpc_endpoint_type: Interface
          security_group_ids: data.aws_security_group.local_traffic.id
          private_dns_enabled: true
          subnet_ids: flatten([aws_subnet.eks_private[*].id])
          tags:
            Name: to ebs
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      - k8s-s3:
          vpc_id: data.aws_vpc.the_vpc.id
          service_name: com.amazonaws.data.aws_region.current.name.s3
          route_table_ids: flatten([data.aws_route_table.public_kube.id, aws_route_table.eks_private[*].id])
          depends_on: aws_route_table.eks_private
          tags:
            Name: to s3
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
      - k8s-logs:
          count: '.enable_vpc_endpoints ? 1 : 0'
          vpc_id: data.aws_vpc.the_vpc.id
          service_name: data.aws_vpc_endpoint_service.logs.service_name
          vpc_endpoint_type: Interface
          security_group_ids: data.aws_security_group.local_traffic.id
          private_dns_enabled: true
          subnet_ids: flatten([aws_subnet.eks_private[*].id])
          tags:
            Name: to cloudwatch logs
            Environment: .vpc_name
            Organization: .organization_name
          lifecycle:
            ignore_changes: all
resource:
  aws_route_table:
    private_kube:
      vpc_id: module.cdis_vpc.vpc_id
      tags:
        Name: private_kube
        Environment: .vpc_name
        Organization: .organization_name
  aws_route:
    for_peering:
      count: '.csoc_managed ? 1 : 0'
      route_table_id: aws_route_table.private_kube.id
      destination_cidr_block: .peering_cidr
      vpc_peering_connection_id: module.cdis_vpc.vpc_peering_id
      depends_on: aws_route_table.private_kube
  aws_route_table_association:
    private_kube:
      subnet_id: aws_subnet.private_kube.id
      route_table_id: aws_route_table.private_kube.id
  aws_subnet:
  - private_kube:
      vpc_id: module.cdis_vpc.vpc_id
      cidr_block: '.network_expansion ? cidrsubnet(var.vpc_cidr_block, 5, 0)
        : cidrsubnet(var.vpc_cidr_block, 4, 2)'
      map_public_ip_on_launch: false
      availability_zone: data.aws_availability_zones.available.names[0]
      tags: 'tomap("Name": "int_services", "Organization": ".organization_name",
        "Environment": ".vpc_name")'
      lifecycle:
        ignore_changes: tags availability_zone
  - private_db_alt:
      vpc_id: module.cdis_vpc.vpc_id
      cidr_block: '.network_expansion ? cidrsubnet(var.vpc_cidr_block, 5, 1)
        : cidrsubnet(var.vpc_cidr_block, 4, 3)'
      availability_zone: data.aws_availability_zones.available.names[1]
      map_public_ip_on_launch: false
      tags:
        Name: private_db_alt
        Environment: .vpc_name
        Organization: .organization_name
      lifecycle:
        ignore_changes: tags availability_zone
  aws_db_subnet_group:
    private_group:
      name: .vpc_name_private_group
      subnet_ids: aws_subnet.private_kube.id aws_subnet.private_db_alt.id
      description: Private subnet group
      tags:
        Name: Private subnet group
        Environment: .vpc_name
        Organization: .organization_name



apiVersion: v1
kind: Namespace
metadata:
  name: ack-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ack-ec2-controller
  namespace: ack-system
  labels:
    app.kubernetes.io/name: ack-ec2-controller
    app.kubernetes.io/part-of: ack-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ack-ec2-controller
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ack-ec2-controller
    spec:
      containers:
      - command:
        - ./bin/controller
        args:
        - --aws-region
        - "$(AWS_REGION)"
        - --aws-endpoint-url
        - "$(AWS_ENDPOINT_URL)"
        - --enable-development-logging=$(ACK_ENABLE_DEVELOPMENT_LOGGING)
        - --log-level
        - "$(ACK_LOG_LEVEL)"
        - --resource-tags
        - "$(ACK_RESOURCE_TAGS)"
        - --watch-namespace
        - "$(ACK_WATCH_NAMESPACE)"
        - --enable-leader-election=$(ENABLE_LEADER_ELECTION)
        - --leader-election-namespace
        - "$(LEADER_ELECTION_NAMESPACE)"
        - --reconcile-default-max-concurrent-syncs
        - "$(RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS)"
        - --feature-gates
        - "$(FEATURE_GATES)"
        image: controller:latest
        name: controller
        ports:
          - name: http
            containerPort: 8080
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 200Mi
        env:
        - name: ACK_SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_REGION
          value: ""
        - name: AWS_ENDPOINT_URL
          value: ""
        - name: ACK_WATCH_NAMESPACE
          value: ""
        - name: ACK_ENABLE_DEVELOPMENT_LOGGING
          value: "false"
        - name: ACK_LOG_LEVEL
          value: "info"
        - name: ACK_RESOURCE_TAGS
          value: "services.k8s.aws/controller-version=%CONTROLLER_SERVICE%-%CONTROLLER_VERSION%,services.k8s.aws/namespace=%K8S_NAMESPACE%"
        - name: ENABLE_LEADER_ELECTION
          value: "false"
        - name: LEADER_ELECTION_NAMESPACE
          value: "ack-system"
        - name: "RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS"
          value: "1"
        - name: "FEATURE_GATES"
          value: ""
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 10
      serviceAccountName: ack-ec2-controller
      hostIPC: false
      hostPID: false
      hostNetwork: false
      dnsPolicy: ClusterFirst